//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions Asset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionsAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionsAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions Asset"",
    ""maps"": [
        {
            ""name"": ""Fishing"",
            ""id"": ""bc2defb3-9415-4932-91e7-ad0f3d173ca8"",
            ""actions"": [
                {
                    ""name"": ""SelectCasting"",
                    ""type"": ""Button"",
                    ""id"": ""25940b6b-3ff0-4203-915b-034fd16b8c3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""1448f298-b1b4-4a68-a105-4ad18b5b3a27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Catch"",
                    ""type"": ""Button"",
                    ""id"": ""d20348e0-b4a4-4add-b3dc-1a3b0e9ea299"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move cursor"",
                    ""type"": ""Value"",
                    ""id"": ""60eebeaf-bb66-4172-bd58-276dadf2d468"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6573c7fd-f01c-4f19-885e-d50b92c57d4a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SelectCasting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62ec0add-4f74-4913-8207-b6c4ad1b0ddd"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller"",
                    ""action"": ""SelectCasting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b32059f-1a5f-428b-bfb6-5b4a0cfd0bff"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""SelectCasting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32b6538a-bac7-44e8-85b9-53e1f8fd8054"",
                    ""path"": ""<Keyboard>/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59aa4b9d-9ee4-40f0-815a-69c14bc1d334"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b861de4-ee47-4337-ad2d-85905f4ac086"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f58f0354-7289-434b-b0fd-0ecfcaa13974"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move cursor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d782a2f-3212-4a97-acc2-6aa61b92a800"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""431b862b-ff6e-4fc0-b358-cb070967e4c5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9309f579-78ab-43f8-9038-ce4c83fbb195"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cf3dca5b-e691-4d1b-a849-9740c8b23a99"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""578c3f21-d4af-4053-9bce-ad753f185b22"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move cursor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4bfac8f9-6969-444c-98da-dd8688705a26"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller;Xbox Controller"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""095b5f5c-86a1-41d5-8bf5-2331303d1519"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller;Xbox Controller"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3d3a2974-edce-4285-8afc-0126c4a780b6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller;Xbox Controller"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7b841c7e-ce41-40f1-a29b-2a755ec1bd9b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller;Xbox Controller"",
                    ""action"": ""Move cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""779269ae-4a4d-4e75-b880-acd1f96e015d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Catch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f7b6538-54b8-493c-9caf-2a85bcdf657d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Switch Controller"",
                    ""action"": ""Catch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f1d2164-9a17-4d35-b09c-f0f31da677e0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Controller"",
                    ""action"": ""Catch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""3615abdc-97af-473d-912a-09388ee27429"",
            ""actions"": [
                {
                    ""name"": ""AddHookPower"",
                    ""type"": ""Button"",
                    ""id"": ""86a1619d-603b-4d34-ac31-abd44f14f8b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecreaseHookPower"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dad3f2ea-5f8a-4010-9f9e-e778d10ffefc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8dfaf95-fef7-4357-a785-14a0e8540a78"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddHookPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9864d5a6-2396-4eef-b5ff-e14229523ae0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreaseHookPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Switch Controller"",
            ""bindingGroup"": ""Switch Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xbox Controller"",
            ""bindingGroup"": ""Xbox Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_SelectCasting = m_Fishing.FindAction("SelectCasting", throwIfNotFound: true);
        m_Fishing_Cancel = m_Fishing.FindAction("Cancel", throwIfNotFound: true);
        m_Fishing_Catch = m_Fishing.FindAction("Catch", throwIfNotFound: true);
        m_Fishing_Movecursor = m_Fishing.FindAction("Move cursor", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_AddHookPower = m_Debug.FindAction("AddHookPower", throwIfNotFound: true);
        m_Debug_DecreaseHookPower = m_Debug.FindAction("DecreaseHookPower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fishing
    private readonly InputActionMap m_Fishing;
    private List<IFishingActions> m_FishingActionsCallbackInterfaces = new List<IFishingActions>();
    private readonly InputAction m_Fishing_SelectCasting;
    private readonly InputAction m_Fishing_Cancel;
    private readonly InputAction m_Fishing_Catch;
    private readonly InputAction m_Fishing_Movecursor;
    public struct FishingActions
    {
        private @InputActionsAsset m_Wrapper;
        public FishingActions(@InputActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCasting => m_Wrapper.m_Fishing_SelectCasting;
        public InputAction @Cancel => m_Wrapper.m_Fishing_Cancel;
        public InputAction @Catch => m_Wrapper.m_Fishing_Catch;
        public InputAction @Movecursor => m_Wrapper.m_Fishing_Movecursor;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void AddCallbacks(IFishingActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingActionsCallbackInterfaces.Add(instance);
            @SelectCasting.started += instance.OnSelectCasting;
            @SelectCasting.performed += instance.OnSelectCasting;
            @SelectCasting.canceled += instance.OnSelectCasting;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Catch.started += instance.OnCatch;
            @Catch.performed += instance.OnCatch;
            @Catch.canceled += instance.OnCatch;
            @Movecursor.started += instance.OnMovecursor;
            @Movecursor.performed += instance.OnMovecursor;
            @Movecursor.canceled += instance.OnMovecursor;
        }

        private void UnregisterCallbacks(IFishingActions instance)
        {
            @SelectCasting.started -= instance.OnSelectCasting;
            @SelectCasting.performed -= instance.OnSelectCasting;
            @SelectCasting.canceled -= instance.OnSelectCasting;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Catch.started -= instance.OnCatch;
            @Catch.performed -= instance.OnCatch;
            @Catch.canceled -= instance.OnCatch;
            @Movecursor.started -= instance.OnMovecursor;
            @Movecursor.performed -= instance.OnMovecursor;
            @Movecursor.canceled -= instance.OnMovecursor;
        }

        public void RemoveCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingActions @Fishing => new FishingActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_AddHookPower;
    private readonly InputAction m_Debug_DecreaseHookPower;
    public struct DebugActions
    {
        private @InputActionsAsset m_Wrapper;
        public DebugActions(@InputActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddHookPower => m_Wrapper.m_Debug_AddHookPower;
        public InputAction @DecreaseHookPower => m_Wrapper.m_Debug_DecreaseHookPower;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @AddHookPower.started += instance.OnAddHookPower;
            @AddHookPower.performed += instance.OnAddHookPower;
            @AddHookPower.canceled += instance.OnAddHookPower;
            @DecreaseHookPower.started += instance.OnDecreaseHookPower;
            @DecreaseHookPower.performed += instance.OnDecreaseHookPower;
            @DecreaseHookPower.canceled += instance.OnDecreaseHookPower;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @AddHookPower.started -= instance.OnAddHookPower;
            @AddHookPower.performed -= instance.OnAddHookPower;
            @AddHookPower.canceled -= instance.OnAddHookPower;
            @DecreaseHookPower.started -= instance.OnDecreaseHookPower;
            @DecreaseHookPower.performed -= instance.OnDecreaseHookPower;
            @DecreaseHookPower.canceled -= instance.OnDecreaseHookPower;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_SwitchControllerSchemeIndex = -1;
    public InputControlScheme SwitchControllerScheme
    {
        get
        {
            if (m_SwitchControllerSchemeIndex == -1) m_SwitchControllerSchemeIndex = asset.FindControlSchemeIndex("Switch Controller");
            return asset.controlSchemes[m_SwitchControllerSchemeIndex];
        }
    }
    private int m_XboxControllerSchemeIndex = -1;
    public InputControlScheme XboxControllerScheme
    {
        get
        {
            if (m_XboxControllerSchemeIndex == -1) m_XboxControllerSchemeIndex = asset.FindControlSchemeIndex("Xbox Controller");
            return asset.controlSchemes[m_XboxControllerSchemeIndex];
        }
    }
    public interface IFishingActions
    {
        void OnSelectCasting(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnCatch(InputAction.CallbackContext context);
        void OnMovecursor(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnAddHookPower(InputAction.CallbackContext context);
        void OnDecreaseHookPower(InputAction.CallbackContext context);
    }
}
